[color]
  ui = auto

; [color "branch"]
;   current = yellow
;   local = 241
;   remote = green

; [color "diff"]
;   meta = yellow
;   frag = magenta
;   old = red
;   new = green
;   whitespace = red reverse

[color "status"]
  added = green
  changed = yellow
  untracked = red

[filter "media"]
  clean = git media clean %f
  smudge = git media smudge %f
  required = true

[push]
  default = simple

[core]
  excludesfile = ~/.config/git/ignore
  pager = delta

[interactive]
  diffFilter = delta --color-only

[delta]
  navigate = true
  line-numbers = true
  side-by-side = true

[diff]
  colorMoved = default

[alias]
  lg = log --decorate --pretty=format:'%C(red)%h%C(reset) —— %C(blue)%an%C(reset): %C(white)%s%C(reset) %C(green)(%ar)%C(reset) %C(yellow)%d%C(reset)%n' --abbrev-commit --date=relative
  lgb = log --graph --decorate --pretty=format:'%C(red)%h%C(reset) —— %C(blue)%an%C(reset): %C(white)%s%C(reset) %Cgreen(%cr)%C(reset) %C(yellow)%d%C(reset)%n' --abbrev-commit --date=relative --branches
  co = checkout
  cob = checkout -b
  mvb = branch -m
  create-patch = !git --no-pager show
  # the SHA to compare diffs against
  review-base = !git merge-base HEAD \"${review_base:-main}\"
  # list files which have changed since review_base
  files = !git diff --name-only $(git review-base)
  # Same as above, but with a diff stat instead of just names
  # (better for interactive use)
  stat = !git diff --stat $(git review-base)
  # split-diff style review using vim-fugitive Gdiff
  review = !$EDITOR -p $(git files) +\"tabdo Gvdiffsplit ${review_base:-main}\" +\"let g:gitgutter_diff_base = '${review_base:-main}'\"
  reviewone = !$EDITOR -p +\"tabdo Gvdiffsplit ${review_base:-main}\" +\"let g:gitgutter_diff_base = '${review_base:-main}'\"
  # For when the diff is too big to review with :Gdiff
  diff-review = !git diff $(git review-base)
  # Review by commit
  by-commit = !git log -p --reverse $(git review-base)..HEAD
  # Show a markdown-formatted summary of commits from {review_base:-main} until HEAD
  pr-summary = !git log --reverse --format=\"- **%s** (%h)%n%n%w(74,2,2)%b\" \"${review_base:-main}\"..HEAD

# define command which will be used when "nvim" is set as a merge tool
[mergetool "nvim"]
  cmd = nvim -f -c \"Gvdiffsplit!\" \"$MERGED\"

[merge]
#  conflictstyle = diff3
  tool = nvim

[mergetool]
  prompt = false

[gpg]
  program = gpg

[commit]
  gpgsign = true
  template = ~/.config/git/commit-template.txt

[init]
  defaultBranch = main
